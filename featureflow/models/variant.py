# coding: utf-8

"""
    Featureflow API

    Featureflow API documentation  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: contact@featureflow.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from .feature import Feature

import pprint
import re  # noqa: F401

import six


class Variant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'environments': 'dict(str, Control)',
        'goal_ids': 'list[str]',
        'key': 'str',
        'links': 'list[Link]',
        'maintainer_id': 'str',
        'name': 'str',
        'permanent': 'bool',
        'project_key': 'str',
        'tags': 'list[str]',
        'variants': 'list[Variant]',
        'meta': 'str'
    }
    if hasattr(Feature, "swagger_types"):
        swagger_types.update(Feature.swagger_types)

    attribute_map = {
        'id': '_id',
        'description': 'description',
        'environments': 'environments',
        'goal_ids': 'goalIds',
        'key': 'key',
        'links': 'links',
        'maintainer_id': 'maintainerId',
        'name': 'name',
        'permanent': 'permanent',
        'project_key': 'projectKey',
        'tags': 'tags',
        'variants': 'variants',
        'meta': 'meta'
    }
    if hasattr(Feature, "attribute_map"):
        attribute_map.update(Feature.attribute_map)

    def __init__(self, id=None, description=None, environments=None, goal_ids=None, key=None, links=None, maintainer_id=None, name=None, permanent=None, project_key=None, tags=None, variants=None, meta=None, *args, **kwargs):  # noqa: E501
        """Variant - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._environments = None
        self._goal_ids = None
        self._key = None
        self._links = None
        self._maintainer_id = None
        self._name = None
        self._permanent = None
        self._project_key = None
        self._tags = None
        self._variants = None
        self._meta = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if environments is not None:
            self.environments = environments
        if goal_ids is not None:
            self.goal_ids = goal_ids
        if key is not None:
            self.key = key
        if links is not None:
            self.links = links
        if maintainer_id is not None:
            self.maintainer_id = maintainer_id
        if name is not None:
            self.name = name
        if permanent is not None:
            self.permanent = permanent
        if project_key is not None:
            self.project_key = project_key
        if tags is not None:
            self.tags = tags
        if variants is not None:
            self.variants = variants
        if meta is not None:
            self.meta = meta
        Feature.__init__(self, *args, **kwargs)

    @property
    def id(self):
        """Gets the id of this Variant.  # noqa: E501


        :return: The id of this Variant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Variant.


        :param id: The id of this Variant.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this Variant.  # noqa: E501


        :return: The description of this Variant.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Variant.


        :param description: The description of this Variant.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def environments(self):
        """Gets the environments of this Variant.  # noqa: E501


        :return: The environments of this Variant.  # noqa: E501
        :rtype: dict(str, Control)
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this Variant.


        :param environments: The environments of this Variant.  # noqa: E501
        :type: dict(str, Control)
        """

        self._environments = environments

    @property
    def goal_ids(self):
        """Gets the goal_ids of this Variant.  # noqa: E501


        :return: The goal_ids of this Variant.  # noqa: E501
        :rtype: list[str]
        """
        return self._goal_ids

    @goal_ids.setter
    def goal_ids(self, goal_ids):
        """Sets the goal_ids of this Variant.


        :param goal_ids: The goal_ids of this Variant.  # noqa: E501
        :type: list[str]
        """

        self._goal_ids = goal_ids

    @property
    def key(self):
        """Gets the key of this Variant.  # noqa: E501


        :return: The key of this Variant.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Variant.


        :param key: The key of this Variant.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def links(self):
        """Gets the links of this Variant.  # noqa: E501


        :return: The links of this Variant.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Variant.


        :param links: The links of this Variant.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def maintainer_id(self):
        """Gets the maintainer_id of this Variant.  # noqa: E501


        :return: The maintainer_id of this Variant.  # noqa: E501
        :rtype: str
        """
        return self._maintainer_id

    @maintainer_id.setter
    def maintainer_id(self, maintainer_id):
        """Sets the maintainer_id of this Variant.


        :param maintainer_id: The maintainer_id of this Variant.  # noqa: E501
        :type: str
        """

        self._maintainer_id = maintainer_id

    @property
    def name(self):
        """Gets the name of this Variant.  # noqa: E501


        :return: The name of this Variant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Variant.


        :param name: The name of this Variant.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def permanent(self):
        """Gets the permanent of this Variant.  # noqa: E501


        :return: The permanent of this Variant.  # noqa: E501
        :rtype: bool
        """
        return self._permanent

    @permanent.setter
    def permanent(self, permanent):
        """Sets the permanent of this Variant.


        :param permanent: The permanent of this Variant.  # noqa: E501
        :type: bool
        """

        self._permanent = permanent

    @property
    def project_key(self):
        """Gets the project_key of this Variant.  # noqa: E501


        :return: The project_key of this Variant.  # noqa: E501
        :rtype: str
        """
        return self._project_key

    @project_key.setter
    def project_key(self, project_key):
        """Sets the project_key of this Variant.


        :param project_key: The project_key of this Variant.  # noqa: E501
        :type: str
        """

        self._project_key = project_key

    @property
    def tags(self):
        """Gets the tags of this Variant.  # noqa: E501


        :return: The tags of this Variant.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Variant.


        :param tags: The tags of this Variant.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def variants(self):
        """Gets the variants of this Variant.  # noqa: E501


        :return: The variants of this Variant.  # noqa: E501
        :rtype: list[Variant]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this Variant.


        :param variants: The variants of this Variant.  # noqa: E501
        :type: list[Variant]
        """

        self._variants = variants

    @property
    def meta(self):
        """Gets the meta of this Variant.  # noqa: E501


        :return: The meta of this Variant.  # noqa: E501
        :rtype: str
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Variant.


        :param meta: The meta of this Variant.  # noqa: E501
        :type: str
        """

        self._meta = meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Variant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Variant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
