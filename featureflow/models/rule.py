# coding: utf-8

"""
    Featureflow API

    Featureflow API documentation  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: contact@featureflow.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Rule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audience': 'Audience',
        'default_rule': 'bool',
        'description': 'str',
        'variant_splits': 'list[VariantSplit]'
    }

    attribute_map = {
        'audience': 'audience',
        'default_rule': 'defaultRule',
        'description': 'description',
        'variant_splits': 'variantSplits'
    }

    def __init__(self, audience=None, default_rule=None, description=None, variant_splits=None):  # noqa: E501
        """Rule - a model defined in Swagger"""  # noqa: E501
        self._audience = None
        self._default_rule = None
        self._description = None
        self._variant_splits = None
        self.discriminator = None
        if audience is not None:
            self.audience = audience
        if default_rule is not None:
            self.default_rule = default_rule
        if description is not None:
            self.description = description
        if variant_splits is not None:
            self.variant_splits = variant_splits

    @property
    def audience(self):
        """Gets the audience of this Rule.  # noqa: E501


        :return: The audience of this Rule.  # noqa: E501
        :rtype: Audience
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this Rule.


        :param audience: The audience of this Rule.  # noqa: E501
        :type: Audience
        """

        self._audience = audience

    @property
    def default_rule(self):
        """Gets the default_rule of this Rule.  # noqa: E501


        :return: The default_rule of this Rule.  # noqa: E501
        :rtype: bool
        """
        return self._default_rule

    @default_rule.setter
    def default_rule(self, default_rule):
        """Sets the default_rule of this Rule.


        :param default_rule: The default_rule of this Rule.  # noqa: E501
        :type: bool
        """

        self._default_rule = default_rule

    @property
    def description(self):
        """Gets the description of this Rule.  # noqa: E501


        :return: The description of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Rule.


        :param description: The description of this Rule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def variant_splits(self):
        """Gets the variant_splits of this Rule.  # noqa: E501


        :return: The variant_splits of this Rule.  # noqa: E501
        :rtype: list[VariantSplit]
        """
        return self._variant_splits

    @variant_splits.setter
    def variant_splits(self, variant_splits):
        """Sets the variant_splits of this Rule.


        :param variant_splits: The variant_splits of this Rule.  # noqa: E501
        :type: list[VariantSplit]
        """

        self._variant_splits = variant_splits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Rule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
